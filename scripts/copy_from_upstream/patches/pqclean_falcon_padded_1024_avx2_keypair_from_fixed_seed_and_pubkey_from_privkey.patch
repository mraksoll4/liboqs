bb71d215ac3de5bce18342152b6a5019e06de374
diff --git a/crypto_sign/falcon-padded-1024/avx2/api.h b/crypto_sign/falcon-padded-1024/avx2/api.h
index da61032..9b30dbd 100644
--- a/crypto_sign/falcon-padded-1024/avx2/api.h
+++ b/crypto_sign/falcon-padded-1024/avx2/api.h
@@ -21,6 +21,29 @@
 int PQCLEAN_FALCONPADDED1024_AVX2_crypto_sign_keypair(
     uint8_t *pk, uint8_t *sk);
 
+/*
+ * Generate a new key pair from fixed seed. Public key goes into pk[], private key in sk[].
+ * Key sizes are exact (in bytes):
+ *   public (pk): PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_PUBLICKEYBYTES
+ *   private (sk): PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES
+ *   seed (seed): Input buffer containing the fixed seed (size: dependent on algorithm settings, for Falcon standard setting = 48 bytes)
+ *
+ * Return value: 0 on success, -1 on error.
+ */
+int PQCLEAN_FALCONPADDED1024_AVX2_crypto_sign_keypair_from_fseed(
+    uint8_t *pk, uint8_t *sk, const uint8_t *seed);
+
+/*
+ * Generate a public key from a private key. Public key goes into pk[], private key in sk[].
+ * Key sizes are exact (in bytes):
+ *   public (pk): PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_PUBLICKEYBYTES
+ *   private (sk): PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES
+ *
+ * Return value: 0 on success, -1 on error.
+ */
+int PQCLEAN_FALCONPADDED1024_AVX2_crypto_sign_pubkey_from_privkey(
+    uint8_t *pk, const uint8_t *sk);
+
 /*
  * Compute a signature on a provided message (m, mlen), with a given
  * private key (sk). Signature is written in sig[], with length written
diff --git a/crypto_sign/falcon-padded-1024/avx2/pqclean.c b/crypto_sign/falcon-padded-1024/avx2/pqclean.c
index 06560ed..84e366c 100644
--- a/crypto_sign/falcon-padded-1024/avx2/pqclean.c
+++ b/crypto_sign/falcon-padded-1024/avx2/pqclean.c
@@ -105,6 +105,146 @@ PQCLEAN_FALCONPADDED1024_AVX2_crypto_sign_keypair(
     return 0;
 }
 
+/* keypair from fixed seed*/
+int
+PQCLEAN_FALCONPADDED1024_AVX2_crypto_sign_keypair_from_fseed(
+    uint8_t *pk, uint8_t *sk, const uint8_t *seed) {
+    union {
+        uint8_t b[FALCON_KEYGEN_TEMP_10];
+        uint64_t dummy_u64;
+        fpr dummy_fpr;
+    } tmp;
+    int8_t f[1024], g[1024], F[1024];
+    uint16_t h[1024];
+    inner_shake256_context rng;
+    size_t u, v;
+
+    /*
+     * Checking the input seed parameter.
+     * If the seed is NULL, return an error.
+     */
+    if (seed == NULL) {
+        return -1;  // Error: seed is not provided.
+    }
+
+    /*
+     * Initialize the SHAKE256 random number generator using the seed.
+     * We now pass the seed directly to the generator.
+     */
+    inner_shake256_init(&rng);
+    inner_shake256_inject(&rng, seed, 48);
+    inner_shake256_flip(&rng);
+    PQCLEAN_FALCONPADDED1024_AVX2_keygen(&rng, f, g, F, NULL, h, 10, tmp.b);
+    inner_shake256_ctx_release(&rng);
+
+    /*
+     * Encode private key.
+     */
+    sk[0] = 0x50 + 10;
+    u = 1;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_trim_i8_encode(
+            sk + u, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES - u,
+            f, 10, PQCLEAN_FALCONPADDED1024_AVX2_max_fg_bits[10]);
+    if (v == 0) {
+        return -1;
+    }
+    u += v;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_trim_i8_encode(
+            sk + u, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES - u,
+            g, 10, PQCLEAN_FALCONPADDED1024_AVX2_max_fg_bits[10]);
+    if (v == 0) {
+        return -1;
+    }
+    u += v;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_trim_i8_encode(
+            sk + u, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES - u,
+            F, 10, PQCLEAN_FALCONPADDED1024_AVX2_max_FG_bits[10]);
+    if (v == 0) {
+        return -1;
+    }
+    u += v;
+    if (u != PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES) {
+        return -1;
+    }
+
+    /*
+     * Encode public key.
+     */
+    pk[0] = 0x00 + 10;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_modq_encode(
+            pk + 1, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_PUBLICKEYBYTES - 1,
+            h, 10);
+    if (v != PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_PUBLICKEYBYTES - 1) {
+        return -1;
+    }
+
+    return 0;
+}
+
+/*
+ * This function reconstructs the public key from a given private key.
+ * It decodes the private key components (f and g) from the secret key
+ * and uses them to regenerate the corresponding public key (h).
+ * The generated public key is then encoded into the provided pk array.
+ * 
+ * public (pk):  The output buffer where the public key will be stored (must be at least PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES in size).
+ * private (sk):  The input secret key (private key) in byte array format (must be PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES in size).
+ * Return value: 0 on success, -1 on error.
+ */
+int
+PQCLEAN_FALCONPADDED1024_AVX2_crypto_sign_pubkey_from_privkey(
+    uint8_t *pk, const uint8_t *sk) {
+    union {
+        uint8_t b[FALCON_KEYGEN_TEMP_10];
+        uint64_t dummy_u64;
+        fpr dummy_fpr;
+    } tmp;
+    int8_t f[1024], g[1024], F[1024];
+    uint16_t h[1024];
+    size_t u, v;
+
+    /*
+     * Decode the private key.
+     */
+    if (sk[0] != 0x50 + 10) {
+        return -1;
+    }
+    u = 1;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_trim_i8_decode(
+            f, 10, PQCLEAN_FALCONPADDED1024_AVX2_max_fg_bits[10],
+            sk + u, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES - u);
+    if (v == 0) {
+        return -1;
+    }
+    u += v;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_trim_i8_decode(
+            g, 10, PQCLEAN_FALCONPADDED1024_AVX2_max_fg_bits[10],
+            sk + u, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_SECRETKEYBYTES - u);
+    if (v == 0) {
+        return -1;
+    }
+
+    /*
+     * Reconstruct the public key using f and g by calling the compute_public function.
+     */
+    if (!PQCLEAN_FALCONPADDED1024_AVX2_compute_public(h, f, g, 10, tmp.b)) {
+        return -1;
+    }
+
+    /*
+     * Encode public key.
+     */
+    pk[0] = 0x00 + 10;
+    v = PQCLEAN_FALCONPADDED1024_AVX2_modq_encode(
+            pk + 1, PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_PUBLICKEYBYTES - 1,
+            h, 10);
+    if (v != PQCLEAN_FALCONPADDED1024_AVX2_CRYPTO_PUBLICKEYBYTES - 1) {
+        return -1;
+    }
+
+    return 0;
+}
+
 /*
  * Compute the signature. nonce[] receives the nonce and must have length
  * NONCELEN bytes. sigbuf[] receives the signature value (without nonce
